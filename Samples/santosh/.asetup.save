#Release cmake

export LANG="C.utf8"
export LC_ALL="C.utf8"
export COOL_ORA_ENABLE_ADAPTIVE_OPT="Y"
export ASETUP_PRINTLEVEL="0"
export BINARY_TAG="x86_64-el9-gcc13-opt"
export CMTCONFIG="x86_64-el9-gcc13-opt"

if [ -d /tmp/msaadawy ]; then
   export ASETUP_SYSBIN=`mktemp -d /tmp/msaadawy/.asetup-sysbin-XXXXXX_$$`
else
   export ASETUP_SYSBIN=`mktemp -d /afs/cern.ch/user/m/msaadawy/QT/Samples/santosh/.asetup-sysbin-XXXXXX_$$`
fi
source $AtlasSetup/scripts/sys_exe-alias.sh '/usr/bin/'
if [ -n "${MAKEFLAGS:+x}" ]; then
    asetup_flags=`echo ${MAKEFLAGS} | \grep ' -l'`
    if [ -z "${asetup_flags}" ]; then
        export MAKEFLAGS="${MAKEFLAGS} -l10"
    fi
else
    export MAKEFLAGS="-j10 -l10"
fi
source /cvmfs/sft.cern.ch/lcg/releases/gcc/13.1.0-b3d18/x86_64-el9/setup.sh
if [ -z "${CC:+x}" ]; then
    export CC=`\env which gcc 2>/dev/null`
    [[ -z "$CC" ]] && unset CC
fi
if [ -z "${CXX:+x}" ]; then
    export CXX=`\env which g++ 2>/dev/null`
    [[ -z "$CXX" ]] && unset CXX
fi
if [ -z "${CUDAHOSTCXX:+x}" ]; then
    export CUDAHOSTCXX=`\env which g++ 2>/dev/null`
    [[ -z "$CUDAHOSTCXX" ]] && unset CUDAHOSTCXX
fi
if [ -z "${FC:+x}" ]; then
    export FC=`\env which gfortran 2>/dev/null`
    [[ -z "$FC" ]] && unset FC
fi
export CMAKE_NO_VERBOSE="1"
if [ -z "${CMAKE_BUILD_PARALLEL_LEVEL:+x}" ]; then
    export CMAKE_BUILD_PARALLEL_LEVEL="10"
fi
type lsetup >/dev/null 2>/dev/null
if [ $? -ne 0 ]; then
   source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh --quiet
fi
source $ATLAS_LOCAL_ROOT_BASE/packageSetups/localSetup.sh --quiet "cmake 3.27.5"
if [ -z "${AtlasSetup:+x}" ]; then
    export AtlasSetup="/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/AtlasSetup/V03-00-12/AtlasSetup"
    export AtlasSetupVersion="AtlasSetup-03-00-12"
fi
export FRONTIER_SERVER="(serverurl=http://atlasfrontier-local.cern.ch:8000/atlr)(serverurl=http://atlasfrontier-ai.cern.ch:8000/atlr)(proxyurl=http://ca-proxy-atlas.cern.ch:3128)(proxyurl=http://ca-proxy-meyrin.cern.ch:3128)(proxyurl=http://ca-proxy.cern.ch:3128)(proxyurl=http://atlasbpfrontier.cern.ch:3127)"
export ATLAS_POOLCOND_PATH="/cvmfs/atlas-condb.cern.ch/repo/conditions"
export ATLAS_DB_AREA="/cvmfs/atlas.cern.ch/repo/sw/database"
export DBRELEASE_OVERRIDE="current"
export AtlasVersion="25.0.9"
export AtlasProject="Athena"
export AtlasBaseDir="/cvmfs/atlas-nightlies.cern.ch/repo/sw/main_Athena_x86_64-el9-gcc13-opt/2024-06-09T2101"
export ATLAS_RELEASE_BASE="/cvmfs/atlas-nightlies.cern.ch/repo/sw/main_Athena_x86_64-el9-gcc13-opt/2024-06-09T2101"
export AtlasBuildBranch="main"
export AtlasArea="/cvmfs/atlas-nightlies.cern.ch/repo/sw/main_Athena_x86_64-el9-gcc13-opt/2024-06-09T2101/Athena/25.0.9"
export AtlasReleaseType="nightly"
export AtlasBuildStamp="2024-06-09T2101"
export SITEROOT="/cvmfs/atlas-nightlies.cern.ch/repo/sw/main_Athena_x86_64-el9-gcc13-opt"
export ATLAS_RELEASEDATA="/cvmfs/atlas-nightlies.cern.ch/repo/sw/main_Athena_x86_64-el9-gcc13-opt/atlas/offline/ReleaseData"
export LCG_RELEASE_BASE="/cvmfs/atlas-nightlies.cern.ch/repo/sw/main_Athena_x86_64-el9-gcc13-opt/sw/lcg/releases"
export G4PATH="/cvmfs/atlas-nightlies.cern.ch/repo/sw/main_Athena_x86_64-el9-gcc13-opt/Geant4"
export TDAQ_RELEASE_BASE="/cvmfs/atlas.cern.ch/repo/sw/tdaq"
source /cvmfs/atlas-nightlies.cern.ch/repo/sw/main_Athena_x86_64-el9-gcc13-opt/2024-06-09T2101/Athena/25.0.9/InstallArea/x86_64-el9-gcc13-opt/setup.sh
asetup_status=$?
if [ ${asetup_status} -ne 0 ]; then
    \echo "AtlasSetup(ERROR): sourcing release setup script (/cvmfs/atlas-nightlies.cern.ch/repo/sw/main_Athena_x86_64-el9-gcc13-opt/2024-06-09T2101/Athena/25.0.9/InstallArea/x86_64-el9-gcc13-opt/setup.sh) failed"
fi
export TestArea="/afs/cern.ch/user/m/msaadawy/QT/Samples/santosh"
alias_sys_exe emacs
echo $LD_LIBRARY_PATH | egrep "LCG_[^/:]*/curl/" >/dev/null
if [ $? -eq 0 ]; then
    alias_sys_exe_envU git
fi
\expr 1 \* 1 + 1 >/dev/null 2>&1
if [ $? -ne 0 ]; then
    echo -e '\nMaking workaround-alias for expr on this *OLD* machine'; alias_sys_exe expr
fi
export PATH="${ASETUP_SYSBIN}:${PATH}"

# Check the completeness in the nightly release
for onepath in $(echo $LD_LIBRARY_PATH | tr ":" "\n"); do
   if [[ $onepath == ${AtlasBaseDir}* && ! -d $onepath ]]; then
      echo \!\! FATAL \!\! $onepath does not exist
      return 1
   fi
done

#Release Summary as follows:
#Release base=/cvmfs/atlas-nightlies.cern.ch/repo/sw/main_Athena_x86_64-el9-gcc13-opt/2024-06-09T2101
#Release project=Athena
#Release releaseNum=25.0.9
#Release asconfig=x86_64-el9-gcc13-opt

# Execute user-specified epilog

source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/swConfig/asetup/asetupEpilog.sh
script_status=$?
if [ ${script_status} -ne 0 ]; then
    \echo "AtlasSetup(ERROR): User-specified epilog (source /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/swConfig/asetup/asetupEpilog.sh) reported failure (error ${script_status})"
fi
